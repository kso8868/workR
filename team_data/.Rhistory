#
# 문1)
# trees 데이터셋에 대해 다음의 문제를 해결하는 R 코드를 작성하시오.
#
# (1) 나무 둘레(Girth)와 나무의 키(Height)로 나무의 볼륨을 예측하는 다중선형 회귀
# 모델을 만드시오.
trees
#
# 문1)
# trees 데이터셋에 대해 다음의 문제를 해결하는 R 코드를 작성하시오.
#
# (1) 나무 둘레(Girth)와 나무의 키(Height)로 나무의 볼륨을 예측하는 다중선형 회귀
# 모델을 만드시오.
head(trees)
str(trees)
model1 <- lm(Volume ~ . , data = trees)
model1
head(trees)
str(trees)
#
# (3) (2)에서 예측한 볼륨과 실제 trees 데이터셋의 볼륨(Volume)이 얼마나 차이가
# 나는지 보이시오. (예측값, 실제값, 예측값-실제값을 나타낸다.)
residuals(model1)
#
# (3) (2)에서 예측한 볼륨과 실제 trees 데이터셋의 볼륨(Volume)이 얼마나 차이가
# 나는지 보이시오. (예측값, 실제값, 예측값-실제값을 나타낸다.)
fitted(model1)
deviance(model1)
predict(model1)
fitted(model1)
residuals(model1)
deviance(model1)
# 문2)
# mtcars 데이터셋에서 다른 변수들을 이용하여 연비(mpg)를 예측하는 다중 회귀모델을 만드시오.
head(mtcars)
str(mtcars)
model.mt <- lm(mpg ~ . , data = mtcars)
model.mt
model.mt <- lm(mpg ~ . , data = mtcars)
model.mt
model.mt1 <- stepAIC(model.mt)
model.mt1
model.mt <- lm(mpg ~ . , data = mtcars)
model.mt
model.mt1 <- stepAIC(model.mt)
model.mt1
summary(model.mt)
summary(model.mt1)
mydata <- read.csv( "https://stats.idre.ucla.edu/stat/data/binary.csv" )
head(mydata)
str(mydata)
head(mtcars)
str(mtcars)
# (1) 전체 변수를 이용하여 연비(mpg)를 예측하는 회귀모델을 만들고 회귀식을 나타
# 내시오.
model_mt <- lm(mpg ~ . , data = mtcars)
model_mt
#mpg = (12.30337) + (-0.11144*mtcars$cyl) + (0.01334*mtcars$disp) + (-0.02148*mtcars$hp)+ (0.78711*mtcars$drat)
# + (-3.71530*mtcars$wt) + (0.82104*mtcars$qsec) + (0.31776*mtcars$vs) + (2.52023*mtcars$am)
# + (0.65541*mtcars$gear) + (-0.19942*mtcars$carb)
#
# (2) 연비(mpg)를 예측하는 데 도움이 되는 변수들만 사용하여 예측하는 회귀모델을
# 만들고 회귀식을 나타내시오.
model_mt1 <- stepAIC(model.mt)
model_mt1
#mpg = (9.618) + (-3.917*mtcars$wt) + (1.226*mtcars$qsec) + (2.936*mtcars$am)
# (3) (1), (2)에서 만든 예측모델의 설명력(Adjusted R-squared)을 비교하시오.
summary(model_mt)
summary(model_mt1)
# model_mt1(Adjusted R-squared:  0.8336)의 설명력이 model_mt(Adjusted R-squared:  0.8066)보다 좋다.
head(mydata)
# (1) gre, gpa, rank를 이용해 합격 여부(admit)를 예측하는 로지스틱 모델을 만드시오(0: 불합격, 1:합격).
mydata_model <- glm(admit~., data = mydata)
mydata_model
round(pred,0)
pred <- predict(iris_model, unknown)
pred
round(pred, 0)
iris.new <- iris
iris.new$Species <- as.integer(iris.new$Species)
head(iris.new)
iris_model <- glm(Species~., data=iris.new)
iris_model
coef(iris_model)
summary(iris_model)
unknown <- data.frame(rbind(c(5.1, 3.5, 1.4, 0.2)))
names(unknown) <- names(iris)[1:4]
unknown
pred <- predict(iris_model, unknown)
pred
round(pred, 0)
# (2) mydata에서 합격 여부(admit)를 제외한 데이터를 예측 대상 데이터로 하여 (1)에서 만든 모델에 입력하여
# 합격 여부를 예측하고 실제값과 예측값을 나타내시오.
predict(mydata_model)
mydata_model
head(mydata)
unknown <- data.frame(rbind(c(380, 3.61, 3)))
predict(mydata_model, unknown)
unknown <- data.frame(rbind(c(380, 3.61, 3)))
predict(mydata_model, unknown)
unknown
unknown <- data.frame(rbind(c(380, 3.61, 3)))
names(unknown) <- names(mydata_model)[2:4]
predict(mydata_model, unknown)
mydata_model
pred <-predict(mydata_model, mydata[,2:4])
pred
round(pred, 0)
summary(mydata_model)
round(pred, 0)
summary(mydata_model)
mydata$admit
predict(mydata_model)
pred<- round(pred, 0)
pred
mydata$admit
pred
summary(mydata_model)
mydata$admit
# (3) 만들어진 모델의 예측 정확도를 나타내시오.
residuals(mydata_model)
summary(mydata_model)
zz <- mydata$admit
ass <- mean(pred == zz)
ass
pred <-predict(mydata_model, mydata[,2:4])
pred
A <- mydata$admit
A
head(pred)
head(pred,20)
A
head(mydata)
ass <- mean(pred == A)
ass
pred <-predict(mydata_model, mydata[,2:4])
pred
pred<- round(pred, 0)
pred
A <- mydata$admit
A
head(pred,20)
# (3) 만들어진 모델의 예측 정확도를 나타내시오.
ass <- mean(pred == A)
ass
cor(new)
year <- c(2011:2017)
지역GDP <- c(12207092, 13193136, 13960947, 15147843,
16946709, 18719373, 19981072 ) #백만원
소비자물가지수 <- c(95.76, 96.93, 98.27, 99.37, 100.00, 101.29, 103.62 )
농가인구 <- c(114062, 113298, 11174, 109510, 93404, 88385, 86463 )  # 명
농가소득 <- c(11266, 12005, 10037, 9001, 7713, 8198, 13302 )    #단위: 천원
감귤생산량 <- c(588054, 668610, 672267, 696762, 635032, 599642, 576722 )
수출금액 <- c(99735, 107942, 103285, 106415, 121068, 128994, 155362 )
사업체수 <- c(47144, 49252, 51727, 53897, 55155, 57791, 60063 )
관광객수 <- c(8740976, 9691703, 10851265, 12273917, 13664395, 15852980, 14753236 )
순이동자수<- c(2343,	4876,	7823,	11112,	14257,	14632,	14005)
주민등록인구 <- c(583284,	592449,	604670,	621550,	641355,	661190,	678772)
인구성장률 <- c(1.1,	1.6,	2.1,	2.8,	3.2,	3.1,	2.7)
jeju_eco<- data.frame(year,지역GDP,소비자물가지수,농가인구,농가소득,
감귤생산량,수출금액,사업체수,관광객수)
new <- data.frame(지역GDP, 순이동자수, 주민등록인구, 인구성장률)
cor(new)
str( trees )
head( trees )
trees_height_model <- lm( Height~Girth + Volume, data = trees )
coef( trees_height_model )
summary( trees_height_model )
fitted( trees_height_model )
residuals( trees_height_model )
str( trees )
head( trees )
trees_height_model <- lm( Volume~. , data = trees )
coef( trees_height_model )
summary( trees_height_model )
setwd("c:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv",sheetIndex=1,encoding="UTF-8", header=T)
grdp_person
setwd("c:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv",encoding="UTF-8", header=T)
grdp_person
setwd("c:/workR/team_data")
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", encoding="UTF-8", header=T)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", encoding="UTF-8", header=T)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", encoding="UTF-8", header=T)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", encoding="UTF-8", header=T)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", encoding="UTF-8", header=T)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도__20191218095201", encoding="UTF-8", header=T)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.xlsx(file="1인당_GRDP_시도.xlsx", sheetIndex=1, encoding="UTF-8", header=T)
grdp_person
t(grdp_person)
setwd("D:/workR/team_data")
grdp_person<- read.xlsx(file="1인당_GRDP_시도.xlsx", sheetIndex=1, encoding="UTF-8", header=T)
grdp_person
city_name <- c(전국, 서울특별시, 부산광역시, 대구광역시, 인천광역시, 광주광역시, 대전광역시, 울산광역시,
경기도, 강원도, 충청북도, 충청남도, 전라북도, 전라남도, 경상북도, 경상남도, 제주특별자치도)
city_name <- c(전국, 서울특별시, 부산광역시, 대구광역시, 인천광역시, 광주광역시, 대전광역시, 울산광역시,
경기도, 강원도, 충청북도, 충청남도, 전라북도, 전라남도, 경상북도, 경상남도, 제주특별자치도)
city_name <- c(전국, 서울특별시, 부산광역시, 대구광역시, 인천광역시, 광주광역시, 대전광역시, 울산광역시,
경기도, 강원도, 충청북도, 충청남도, 전라북도, 전라남도, 경상북도, 경상남도, 제주특별자치도)
city_name <- c('전국', '서울', '부산', '대구', '인천', '광주', '대전', '울산',
'경기', '강원', '충북', '충남', '전북', '전남', '경북', '경남', '제주')
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", sheetIndex=1, encoding="UTF-8", header=T)
grdp_person
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", header=T)
grdp_person
grdp_person <- t(grdp_person)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", header=T)
grdp_person
grdp_person <- t(grdp_person)
grdp_person
str(grdp_person)
grdp_person <- data.frame(grdp_person)
grdp_person <- t(grdp_person)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", header=T)
grdp_person <- data.frame(grdp_person)
grdp_person <- t(grdp_person)
grdp_person
str(grdp_person)
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", header=T)
grdp_person <- data.frame(grdp_person)
grdp_person <- t(grdp_person)
grdp_person
as.numeric(grdp_person[2:8,-1])
as.data.frame.numeric(grdp_person)
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", header=T)
grdp_person <- data.frame(grdp_person)
grdp_person <- t(grdp_person)
as.data.frame.numeric(grdp_person)
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", header=T)
grdp_person <- data.frame(grdp_person)
grdp_person <- t(grdp_person)
grdp_person
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv", header=T)
grdp_person <- data.frame(grdp_person)
str(grdp_person)
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv")
grdp_person <- data.frame(grdp_person)
str(grdp_person)
setwd("D:/workR/team_data")
grdp_person<- read.csv(file="1인당_GRDP_시도.csv")
grdp_person <- data.frame(grdp_person)
str(grdp_person)
mydata <- iris[ , 1:4]
fit <- kmeans(x=mydata, centers = 3)
fit
mydata <- iris[ , 1:4]
fit <- kmeans(x=mydata, centers = 3)
fit
fit$cluster
fit$centers
library(cluster)
library(cluster)
clusplot(mydata,
fit$cluster,
color=T,
shade = T,
labels=2,
lines=1)
clusplot(mydata,
fit$cluster,
color=T,
shade = T,
labels=2,
lines=0)
clusplot(mydata,
fit$cluster,
color=T,
shade = T,
labels=1,
lines=0)
